<?xml version="1.0"?>

<!DOCTYPE simulator [
<!ATTLIST algorithm id ID #IMPLIED>
<!ATTLIST problem id ID #IMPLIED>
<!ATTLIST measurements id ID #IMPLIED>
]>

<simulator>
	<algorithms>
		<algorithm id="pso1" class="pso.PSO" particles="10">
			<addStoppingCondition class="stoppingcondition.MaximumIterations" iterations="100"/>
			<topology class="entity.topologies.GBestTopology"/>
			<initialisationStrategy class="algorithm.initialisation.ClonedEntityInitialisationStrategy">
				<entityType class="pso.particle.StandardParticle">
					<velocityInitialisationStrategy class="pso.particle.initialisation.RandomInitialVelocityStrategy"/>
					<velocityUpdateStrategy class="pso.velocityupdatestrategies.StandardVelocityUpdate">
						<vMax class="controlparameterupdatestrategies.ConstantUpdateStrategy" parameter="0.07"/>
					</velocityUpdateStrategy>
				</entityType>
			</initialisationStrategy>
		</algorithm>
		<algorithm id="pso2" class="pso.PSO" particles="20">
			<addStoppingCondition class="stoppingcondition.MaximumIterations" iterations="100"/>
			<initialisationStrategy class="algorithm.initialisation.ClonedEntityInitialisationStrategy">
				<entityType class="pso.particle.StandardParticle">
					<velocityInitialisationStrategy class="pso.particle.initialisation.RandomInitialVelocityStrategy"/>
				</entityType>
			</initialisationStrategy>
		</algorithm>
		<algorithm id="coop" class="cooperative.SplitCooperativeAlgorithm">
			<addStoppingCondition class="stoppingcondition.MaximumIterations" iterations="100"/>
			<addPopulationBasedAlgorithm idref="pso1"/>
			<addPopulationBasedAlgorithm idref="pso2"/>
			<addPopulationBasedAlgorithm idref="pso1"/>
			<addPopulationBasedAlgorithm idref="pso2"/>
			<addPopulationBasedAlgorithm idref="pso1"/>
			<addPopulationBasedAlgorithm idref="pso2"/>
			<splitStrategy class="cooperative.splitstrategies.PerfectSplitStrategy"/>
			<algorithmIterator class="cooperative.populationiterators.SequentialPopulationIterator"/>
<!--			<populationIterator class="cooperative.algorithmiterators.RandomAlgorithmIterator"/>-->
			<contributionUpdateStrategy class="cooperative.contributionupdatestrategies.SelectiveContributionUpdateStrategy"/>
<!--			<contributionUpdateStrategy class="cooperative.contributionupdatestrategies.StandardContributionUpdateStrategy"/>-->
			<fitnessUpdateStrategy class="cooperative.fitnessupdatestrategies.StandardFitnessUpdateStrategy"/>
		</algorithm>
	</algorithms>

	<problems>
		<problem id="griewank" class="problem.FunctionMinimisationProblem">
			<function class="functions.continuous.Griewank" domain="R(-10.0, 10.0)^36"/>
		</problem>
	</problems>

	<measurements id="fitness" class="simulator.MeasurementSuite" samples="10" resolution="1">
			<addMeasurement class="measurement.single.Fitness"/>
	</measurements>

	<simulations>
		<simulation>
			<algorithm idref="coop"/>
			<problem idref="griewank"/>
			<measurements idref="fitness" file="data/coop-pso.txt"/>
		</simulation>
		<simulation>
			<algorithm idref="pso1"/>
			<problem idref="griewank"/>
			<measurements idref="fitness" file="data/norm-pso1.txt"/>
		</simulation>
		<simulation>
			<algorithm idref="pso2"/>
			<problem idref="griewank"/>
			<measurements idref="fitness" file="data/norm-pso2.txt"/>
		</simulation>
	</simulations>
</simulator>
