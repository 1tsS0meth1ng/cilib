<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE simulator [  
	<!ATTLIST algorithm id ID #IMPLIED>  
	<!ATTLIST problem id ID #IMPLIED>  
	<!ATTLIST measurements id ID #IMPLIED>
]>

<simulator>
	<algorithms>
		<algorithm id="ga" class="ec.ea.EA">
			<crossProbability class="controlparameterupdatestrategies.ConstantUpdateStrategy" parameter="1.0"/>
			<mutationProbability class="controlparameterupdatestrategies.ConstantUpdateStrategy" parameter="0.1"/>
			<populationSize>100</populationSize>
			<population class="ec.ea.StandardPopulation" />
			<offspring class="ec.ea.StandardPopulation" />
			<parentSelector class="ec.selectionoperators.TournamentSelection" tournamentSize="5"/>
			<generationGap>25</generationGap> 
			<nextGenerationSurvivalSelector class="ec.selectionoperators.Elitism" />
			<nextGenerationOffSpringSelector class="ec.Selectionoperators.RandomSelection" />	  
			<!-- 	  <crossover class="EvolComp.CrossOverOperators.nPointCrossOver" npoint="2"/> //-->
			<crossover class="ec.crossoveroperators.ArithmeticCrossOver" />
			<!-- 	  <crossover class="EvolComp.CrossOverOperators.UniformBitCrossOver" /> //-->
			<mutator class="ec.mutationoperators.ArithmeticMutation" />
			<random class="math.random.MersenneTwister" />
			<addStoppingCondition class="stoppingcondition.MaximumIterations" iterations="1000" />
		</algorithm>
	</algorithms>
	<problems>
		<problem id="spherical" class="problem.FunctionMinimisationProblem">
			<function class="functions.continuous.Spherical" domain="R(-100,100)^30"/>
		</problem>
	</problems>

	<measurements id="measurements" class="simulator.MeasurementSuite" samples="1" resolution="1">
		<addMeasurement class="measurement.single.FunctionOptimisationError" />
		<addMeasurement class="measurement.single.Solution" />
	</measurements>

	<simulations>
		<simulation>
			<algorithm idref="ga" />
			<problem idref="spherical" />
			<measurements idref="measurements" file="data/gats-spherical.txt" />
		</simulation>
	</simulations>
</simulator>
