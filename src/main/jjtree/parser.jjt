options {
  STATIC=false;
  MULTI=true;
  VISITOR=true;
}

PARSER_BEGIN( DomainParser )
package net.sourceforge.cilib.type.parser;

import java.io.StringReader;
import net.sourceforge.cilib.type.types.Numeric;
import net.sourceforge.cilib.type.types.Type;
import net.sourceforge.cilib.type.types.container.AbstractList;
import net.sourceforge.cilib.type.types.container.StructuredType;
import net.sourceforge.cilib.type.types.container.TypeList;
import net.sourceforge.cilib.type.types.container.Vector;

public class DomainParser {
  public static class DomainNode extends SimpleNode {
    private String value;
    public DomainNode() { super(0); }
    public DomainNode(String value) { super(0); this.value = value; }
    public String getValue() { return value; }
    @Override public String toString() { return value; }
  }

    public static StructuredType parse(String domainString) throws ParseException {
        TypeList list = new TypeList();

        DomainParser parser = new DomainParser(new StringReader(domainString));
        ASTrootElement root = parser.rootElement();

        DomainParserVisitor visitor = new DomainParserVisitorImpl();
        root.jjtAccept(visitor, list);

        if (isVector(list))
            return toVector(list);

        return list;
    }

    private static boolean isVector(TypeList representation) {
        for (Type type : representation)
            if (!(type instanceof Numeric))
                return false;

        return true;
    }

    private static AbstractList toVector(TypeList representation) {
        Vector vector = new Vector(representation.size());

        for (Type type : representation)
            vector.add((Numeric) type);

        return vector;
    }
}
PARSER_END( DomainParser )

ASTrootElement rootElement() : {} { element() <EOF> { return jjtThis; }}
void element()               : {} { domainElement() (repeat())?  }
void domainElement()         : {} { type() (dimension() (exponent())? | exponent())? }
void type()                  : { Token t = null; } { t=<TYPE> {jjtThis.jjtAddChild(new DomainNode(t.image), 0);}}
void exponent()              : { Token t = null; } { <EXPONENT> t=<POSITIVE_INTEGER> {jjtThis.jjtAddChild(new DomainNode(t.image), 0);}}
void dimension()             : {} { lowerDim() }
void lowerDim()              : {} { "(" number() ( upperDim() | value() ) }
void upperDim()              : {} { "," number() ")" }
void value()                 : {} { ")" }
void repeat()                : {} { "," element() }
void number()                : { Token t = null; } {
    (t=<POSITIVE_INTEGER> | t=<NUMBER>) { jjtThis.jjtAddChild(new DomainNode(t.image), 0);}
|   <MINUS> (t=<POSITIVE_INTEGER> | t=<NUMBER>) {jjtThis.jjtAddChild(new DomainNode("-"+t.image), 0);}
}

SKIP  : { " " | "\t" | "\n" | "\r" }
TOKEN : {
    < POSITIVE_INTEGER : (["1"-"9"]) (<DIGIT>)* >
|   < NUMBER : (<DIGIT>)+ ( "." (<DIGIT>)+ )? >
|   < DIGIT : ["0"-"9"] >
|   < TYPE : ( "R" | "B" | "Z" | "T" ) >
|   < MINUS : "-" >
|   < EXPONENT : "^" >
}
