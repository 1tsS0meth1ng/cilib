package net.sourceforge.cilib.pso.velocityupdatestrategies;

import net.sourceforge.cilib.controlparameterupdatestrategies.ControlParameterUpdateStrategy;
import net.sourceforge.cilib.controlparameterupdatestrategies.RandomisedParameterUpdateStrategy;
import net.sourceforge.cilib.entity.Particle;
import net.sourceforge.cilib.math.random.RandomNumber;
import net.sourceforge.cilib.type.types.container.Vector;

/**
 *  The <tt>VelocityUpdateStrategy</tt> strategy for the Bare Bones PSO as
 *  adapted by Kennedy.
 * 
 *  TODO: get the required references
 * 
 *  @author Andries Engelbrecht
 */
public class BareBonesExploitVelocityUpdateStrategy implements VelocityUpdateStrategy {
	private static final long serialVersionUID = -5028807853700576434L;
	
	private RandomNumber randomNumber;
	private RandomNumber rand;
	private ControlParameterUpdateStrategy cognitive;
	private ControlParameterUpdateStrategy social;
	

	public BareBonesExploitVelocityUpdateStrategy() {
		randomNumber = new RandomNumber();
		rand = new RandomNumber();
		
		cognitive = new RandomisedParameterUpdateStrategy();
		social = new RandomisedParameterUpdateStrategy();
		
		cognitive.setParameter(1.496180);
		social.setParameter(1.496180);
	}
	
	
	public BareBonesExploitVelocityUpdateStrategy(BareBonesExploitVelocityUpdateStrategy copy) {
		this();
		
		cognitive.setParameter(copy.cognitive.getParameter());
		social.setParameter(copy.social.getParameter());
	}
	
	
	public BareBonesExploitVelocityUpdateStrategy clone() {
		return new BareBonesExploitVelocityUpdateStrategy(this);
	}
	
	// @TO-DO: maybe just extends BareBonesVelocityUpdateStrategy?
	public void updateVelocity(Particle particle) {
		Vector personalBestPosition = (Vector) particle.getBestPosition();
		Vector nBestPosition = (Vector) particle.getNeighbourhoodBest().getBestPosition();
		Vector velocity = (Vector) particle.getVelocity();

		for (int i = 0; i < particle.getDimension(); ++i) {
			if (rand.getUniform(0,1) < 0.5)
				velocity.setReal(i,personalBestPosition.getReal(i));
			else {
				//double tmp1 = cognitive.getParameter();
				//double tmp2 = social.getParameter();
		
				double sigma = Math.abs(personalBestPosition.getReal(i) - nBestPosition.getReal(i));
				//according to Kennedy
				double mean = (personalBestPosition.getReal(i) + nBestPosition.getReal(i)) / 2;
				//andries proposal: double mean = (tmp1*personalBestPosition.getReal(i) + tmp2*nBestPosition.getReal(i)) / (tmp1+tmp2);
			
				velocity.setReal(i, randomNumber.getGaussian(mean, sigma));
			}
        }
	}


	public void updateControlParameters() {
		// TODO Auto-generated method stub
		
	}
	
}