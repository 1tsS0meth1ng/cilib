/*
 * 
 * DiscreteRecombination.java
 * 
 * Created on Oct 3, 2005
 *
 * Copyright (C) 2003, 2004, 2005 - CIRG@UP 
 * Computational Intelligence Research Group (CIRG@UP)
 * Department of Computer Science 
 * University of Pretoria
 * South Africa
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * 
 */
package net.sourceforge.cilib.ec.crossoveroperators;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Random;
import net.sourceforge.cilib.entity.Entity;
import net.sourceforge.cilib.math.random.MersenneTwister;
import net.sourceforge.cilib.type.types.Vector;

/**
 * @author otter
 * 
 * Discrete Recombination, usually used within Evolutionary Stragies, one offspring is generated by
 * using the exact allele values of the parents.
 * Local or global cross-over can be used.
 * Local - two parents.
 * Global - whole population.
 * 
 * The strategy (glboal or local) can be determined by looking at the number of parents received.
 * 
 * TODO: implement global...
 */
public class DiscreteRecombination<E extends Entity> extends CrossOverOperator<E> {
    
    private Random random;
    
    public DiscreteRecombination() {
        random = new MersenneTwister();
        this.offspring = 1;
        this.parents = 2;   //represents local cross-over
    }

    public Collection<E> reproduce(Collection<? extends E> parents) {
        if(parents.size() < 2)
            throw new RuntimeException("Usage error : DiscreteRecombination needs at least two parents. Received " + parents.size()+ " parents");

        ArrayList<E> offspring = new ArrayList<E>(); 
        //try {   //clone the first parent
        	offspring.add((E)((ArrayList<E>)parents).get(0).clone()); 
        //} catch (CloneNotSupportedException ex) {
        //    throw new RuntimeException("Could not clone parent Entity");
        //}
        
        if(parents.size() == 2) {   //local cross-over.
            for(int i = 0; i < offspring.get(0).getDimension(); i++) {
                if(random.nextBoolean()) {  //change allele to that of the other parent.
                    ((Vector) (offspring.get(0).get())).setReal(i,((Vector)((Entity)((ArrayList)parents).get(1)).get()).getReal(i));
                }
            }
        }
        else {  //global cross-over.
        	throw new RuntimeException("Discrete Global CrossOver, not yet implemented.");
        }
        return offspring;
    }
    
    /**
     * Used by the XML config file to change to global cross-over 
     */
    public void setParents(int parents) {
        this.parents = parents;
    }
}
