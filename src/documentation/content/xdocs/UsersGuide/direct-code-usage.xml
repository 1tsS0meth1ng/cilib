<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2002-2004 The Apache Software Foundation or its licensors,
  as applicable.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "http://forrest.apache.org/dtd/document-v20.dtd">
<document> 
  <header> 
    <title>CILib - User's Guide - Direct usage in source</title> 
  </header> 
  <body>
	<section>
		<title>Including and running CILib within your own source</title>
		<p>
			CILib can asily be intergrated into your project without needing to
			specify an XML configuration file. The code must be called directly and
			built correctly in order to be used without an XML configutration. CILib does, however,
			create defaults so the algorithm should still be able to execute. It is up to the user
			to correctly build the type of algorithm required.
		</p>
		<p>
			The following is a simple example on how to intergrate a gbest PSO within your
			project.
		</p>
		<ol>
			<li>Implement one of the Problem interfaces in your code.</li>
			<li>Instanciate an Algorithm.</li>
			<li>Set the problem.</li>
			<li>Add stopping conditions</li>
			<li>Setup any other properties of the algorithm.</li>
			<li>Add any necessary event listeners to the algorithm.</li>
			<li>Call the initialise() method on the algorithm.</li>
			<li>Start the algorithm.</li>
		</ol>
		<p>
			Algorithm implements the Runnable interface so you can have it execute in a separate 
			thread. Alternatively, call the run() method directly if you do not want the algorithm to run 
			concurrently with your code.
		</p>
		<note>
			All classes must provide a default constructor (this is a requirement of 
			XMLObjectFactory) so sensible defaults have been provided for most properties. 
		</note>
	</section>
	
	<section id="implementation">
		<title>Implementation example</title>
		<p>
			The following is an example to use CILib within your own code:
		</p>
		<ol>
			<li>
				<p>
					Implement the <code>OptimisationProblem</code> interface, or use an already existing class:
				</p>
				<source><![CDATA[
class MyProblem implements OptimisationProblem {
    public double getFitness(Vector solution) {
        // return the fitness of the given potential solution.
        // higher fitness values indicate a better solution to the problem.
    }
         
    .
    .
    .
    .
}
]]></source>
			</li>
			<li>
				<p>
					Construct a PSO (in this case a GCPSO)
				</p>
				<source><![CDATA[
    PSO pso = new GCPSO();
]]></source>
			</li>
			<li>
				<p>
					Set the problem:
				</p>
				<source><![CDATA[
    MyProblem problem = new MyProblem();
    pso.setOptimisationProblem(problem);
]]></source>
			</li>
			<li>
				<p>
					Add stopping conditions. This stops the algorithm execution after 10000 iterations:
				</p>
				<source><![CDATA[
    MaximumIterations maxIter = new maximumIterations(10000);
    pso.addStoppingCondition(maxIter);
]]></source>
			</li>
			<li>
				<p>
					Set any other properties (for this example, we would like to make use of the 
					Von Neumann Topology with 40 particles, as well as use the ZiffGFSR4 random 
					number generator for rho updates):
				</p>
				<fixme author="Gary Pampara">
					Complete this code block.
				</fixme>
				<source><![CDATA[
]]></source>
				<note>
					Alternatively, you can make use of the XMLObjectFactory to setup properties
					in the same way that the simulator does.
				</note>
			</li>
			<li>
				<p>
					Add event listeners:
				</p>
				<source><![CDATA[
    pso.addIterationEventListener(this);
]]></source>
				<note>
					It is assumed that the class implements the <code>IterationEventListener</code> interface.
				</note>
			</li>
			<li>
				<p>
					Call initialise():
				</p>
				<source><![CDATA[
    pso.initialise();
]]></source>
			</li>
			<li>
				<p>
					Start the algorithm:
				</p>
				<source><![CDATA[
    pso.run(); // Executes in current thread
]]></source>
				<p>
					OR
				</p>
				<source><![CDATA[
    new Thread(pso).start(); // Executes in a new thread
]]></source>
				<p>
					To get feedback from the algorithm, you can make use of the measurements in 
					<code>net.sourceforge.cilib.measurement</code> or you can query the algorithm directly:
				</p>
				<source><![CDATA[
    pso.getBestSolution(); // will return the best solution found so far.
]]></source>
			</li>
		</ol>
	</section>

  </body>
</document>
