<?xml version="1.0"?>

<!DOCTYPE simulator [
<!ATTLIST algorithm id ID #IMPLIED>
<!ATTLIST problem id ID #IMPLIED>
<!ATTLIST measurements id ID #IMPLIED>
]>

<simulator>
    <algorithms>
        <algorithm id="gbest" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition"/>
        </algorithm>
        
        <algorithm id="gd-decay" class="gd.GradientDescentBackpropagationTraining">
            <learningRate class="controlparameter.ConstantControlParameter" parameter="0.1" />
            <momentum class="controlparameter.ConstantControlParameter" parameter="0.9" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000" />
            <bpVisitor class="nn.architecture.visitors.BackPropagationVisitor">
                <penalty class="nn.penalty.WeightDecayPenalty">
                    <lambda class="controlparameter.ConstantControlParameter" parameter="0.00005" />
                </penalty>
            </bpVisitor>
        </algorithm>
        
        <algorithm id="gd-elim" class="gd.GradientDescentBackpropagationTraining">
            <learningRate class="controlparameter.ConstantControlParameter" parameter="0.1" />
            <momentum class="controlparameter.ConstantControlParameter" parameter="0.9" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000" />
            <bpVisitor class="nn.architecture.visitors.BackPropagationVisitor">
                <penalty class="nn.penalty.WeightEliminationPenalty" >
                    <lambda class="controlparameter.ConstantControlParameter" parameter="0.00005" />
                    <c class="controlparameter.ConstantControlParameter" parameter="2" />
                </penalty>
            </bpVisitor>
        </algorithm>
        
    </algorithms>
    
    <problems>
        <problem id="iris-decay" class="problem.nn.NNRegularisationDecorator" >    
            <penalty class="nn.penalty.WeightDecayPenalty">
                <lambda class="controlparameter.ConstantControlParameter" parameter="0.00005" />
            </penalty>
            <neuralNetworkProblem class="problem.nn.NNDataTrainingProblem" trainingSetPercentage="0.8" generalisationSetPercentage="0.2">
                <shuffler class="io.transform.ShuffleOperator"/>
                <dataTableBuilder class="io.DataTableBuilder">
                    <dataReader class="io.ARFFFileReader" sourceURL="library/src/test/resources/datasets/iris.arff"/>
                </dataTableBuilder>
                <neuralNetwork class="nn.NeuralNetwork">
                    <architecture class="nn.architecture.Architecture">
                        <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4" />
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="1" />
                            <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                                <domainProvider class="nn.domain.PresetNeuronDomain">
                                    <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-0.2:0.2)"/>
                                </domainProvider> 
                            </layerBuilder>
                        </architectureBuilder>
                    </architecture>
                </neuralNetwork>
            </neuralNetworkProblem>
        </problem>
        <problem id="iris-elim" class="problem.nn.NNRegularisationDecorator">   
            <shuffler class="io.transform.ShuffleOperator"/>
            <penalty class="nn.penalty.WeightEliminationPenalty" >                
                <c class="controlparameter.ConstantControlParameter" parameter="2" />
                <lambda class="controlparameter.ConstantControlParameter" parameter="0.00005" />
            </penalty>
            <neuralNetworkProblem class="problem.nn.NNDataTrainingProblem" trainingSetPercentage="0.8" generalisationSetPercentage="0.2">
                <shuffler class="io.transform.ShuffleOperator"/>
                <dataTableBuilder class="io.DataTableBuilder">
                    <dataReader class="io.ARFFFileReader" sourceURL="library/src/test/resources/datasets/iris.arff"/>
                </dataTableBuilder>
                <neuralNetwork class="nn.NeuralNetwork">
                    <architecture class="nn.architecture.Architecture">
                        <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4" />
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="1"/>
                            <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                                <domainProvider class="nn.domain.PresetNeuronDomain">
                                    <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-0.2:0.2)"/>
                                </domainProvider> 
                            </layerBuilder>
                        </architectureBuilder>
                    </architecture>
                </neuralNetwork>
            </neuralNetworkProblem>
        </problem>
    </problems>

    <measurements id="fitness" class="simulator.MeasurementSuite" resolution="1">
        <addMeasurement class="measurement.single.MSETrainingError"/>
        <addMeasurement class="measurement.single.MSEGeneralisationError"/>
    </measurements>

    <simulations>
        <simulation samples="2">
            <algorithm idref="gbest"/>
            <problem idref="iris-decay"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/irisGbestWeightDecay.csv"/>
        </simulation>
        
        <simulation samples="2">
            <algorithm idref="gbest"/>
            <problem idref="iris-elim"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/irisGbestWeightElimination.csv"/>
        </simulation>

        <simulation samples="2">
            <algorithm idref="gd-decay"/>
            <problem idref="iris-decay"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/irisBackpropagationWeightDecay.csv"/>
        </simulation>
        
        <simulation samples="2">
            <algorithm idref="gd-elim"/>
            <problem idref="iris-elim"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/irisBackpropagationWeightElimination.csv"/>
        </simulation>
    </simulations>
</simulator>
